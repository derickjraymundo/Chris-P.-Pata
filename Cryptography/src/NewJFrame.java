
public class NewJFrame extends javax.swing.JFrame {
    
    private KeyPair generateKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048); // Key size, you can adjust it based on your needs
        return keyPairGenerator.generateKeyPair();
    }

    private void encryptFile() {
        try {
            String filePath = inputFilePath.getText();
            String publicKeyPath = publicKeyFilePath.getText();

            if (filePath.isEmpty() || publicKeyPath.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid file path and public key path.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            PublicKey publicKey = KeyUtils.loadPublicKey(publicKeyPath);

            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);

            byte[] fileContent = Files.readAllBytes(new File(filePath).toPath());
            byte[] encryptedBytes = cipher.doFinal(fileContent);

            try (FileOutputStream fos = new FileOutputStream(filePath + ".encrypted")) {
                fos.write(encryptedBytes);
            }

            JOptionPane.showMessageDialog(this, "File encrypted successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error encrypting file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void decryptFile() {
        try {
            String filePath = inputFilePath.getText();
            String privateKeyPath = privateKeyFilePath.getText();

            if (filePath.isEmpty() || privateKeyPath.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid file path and private key path.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            PrivateKey privateKey = KeyUtils.loadPrivateKey(privateKeyPath);

            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] encryptedBytes = Files.readAllBytes(new File(filePath).toPath());
            byte[] decryptedBytes = cipher.doFinal(encryptedBytes);

            try (FileOutputStream fos = new FileOutputStream(filePath + ".decrypted")) {
                fos.write(decryptedBytes);
            }

            JOptionPane.showMessageDialog(this, "File decrypted successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error decrypting file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

  
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
